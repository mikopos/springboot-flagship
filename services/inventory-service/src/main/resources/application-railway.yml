server:
  port: ${PORT:8085}
  address: 0.0.0.0

spring:
  application:
    name: ${APP_NAME:unknown}
  
  datasource:
    url: jdbc:${POSTGRES_URL}
    username: ${POSTGRES_USERNAME:flagship_user}
    password: ${POSTGRES_PASSWORD:flagship_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
      leak-detection-threshold: 60000
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        connection:
          provider_disables_autocommit: true
        cache:
          use_second_level_cache: false
          use_query_cache: false
        temp:
          use_jdbc_metadata_defaults: false
  
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER:http://localhost:8080/realms/flagship}
          jwk-set-uri: ${JWK_URI:http://localhost:8080/realms/flagship/protocol/openid-connect/certs}
  
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 8192
      linger-ms: 10
      buffer-memory: 8388608
      compression-type: gzip
    consumer:
      group-id: inventory-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 100
      fetch-max-wait: 500
      fetch-min-size: 1024
      properties:
        spring.json.trusted.packages: "com.flagship.inventory.event"

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 4
          max-idle: 2
          min-idle: 0
          max-wait: 1000ms

  cache:
    type: redis
    redis:
      time-to-live: 900000 # 15 minutes in milliseconds
      cache-null-values: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms
  jvm:
    memory:
      enabled: true
  server:
    tomcat:
      threads:
        max: 20
        min-spare: 5
      max-connections: 100
      accept-count: 50
      connection-timeout: 20000

logging:
  level:
    com.flagship.inventory: INFO
    org.springframework.security: WARN
    org.springframework.kafka: WARN
    org.springframework.cache: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
